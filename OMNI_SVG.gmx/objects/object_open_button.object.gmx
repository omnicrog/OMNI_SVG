<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprite_open_button</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>payload=EMPTY_STRING;
package=EMPTY_STRING;
tagsPrevious=0;
bytesPrevious=0;
tagsCurrent=0;
bytesCurrent=0;

tagsPerSec=0;
bytesPerSec=0;

iterator=0;
tags=0;
arraysize=0;
tagsize=0;
filesize=0;
readsize=0;
packagesize=0;
state="ready";
alarm[0]=1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>alarm[0]=fps;
show_debug_message(OMNI_TIME);
bytesCurrent           = readsize; 
bytesPerSec            = ((bytesCurrent-bytesPrevious)*fps)/1024;
bytesPrevious          = bytesCurrent;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>switch(state){
case"opening file":
    if (name!=""){
        if(!file_text_eof(myfile)){
            payload=payload+file_text_readln(myfile);
            readsize=string_length(payload);
            count+=1;
        }else{
            readsize=string_length(payload);
            file_text_close(myfile);
            package=payload;
            packagesize=string_length(package);
            tagsize =string_count("&gt;",payload);
            file_loaded=true;
            state="processing";
        }
        
    }

break;
case"processing":
    if(iterator+1&lt;tagsize){
        next_pos=string_pos("&lt;",string_replace(package,"&lt;",""));
        
        tags[iterator,0]=string_remove_whitespace(string_copy(package,1,next_pos));
        package=string_delete(package,1,next_pos);
        tag = string_copy(tags[iterator,0],1,string_pos("&gt;",tags[iterator,0]));
        show_debug_message(string(tags[iterator,0]));
        
        
        iterator+=1;
    }
    else{
        tags[iterator,0]=string_remove_whitespace(string_copy(package,1,string_length(package)));
        package=string_delete(package,1,string_length(package));
        tag = string_copy(tags[iterator,0],1,string_pos("&gt;",tags[iterator,0]));
        state="processed";
        show_debug_message(string(tags[iterator,0]));
    }
    //write to ini
        ini_open("tags.ini");
        
        if(string_count(" ",tag)&lt;1)
        {
         if(string_count("/&gt;",tag)&gt;0)
         {
          tag = string_copy(tag,1,string_pos("/&gt;",tag)-1);
          tag = string_replace(tag,"&lt;","");
          
         }else
         if(string_count("&lt;/",tag)&gt;0)
         {
          tag = string_copy(tag,1,string_pos("&gt;",tag)-1);
          tag = string_replace(tag,"&lt;/","");
          selfc = "closing tag";
         }else
         {
          if(string_count("&lt;!",tag)&gt;0)|(string_count("&lt;?",tag)&gt;0)
          {
           selfc = "self closing";
          }else
          {
           selfc = "requires closing tag";
          }
          tag = string_copy(tag,1,string_pos("&gt;",tag)-1);
          tag = string_replace(tag,"&lt;","");
         }
        }
        else
        {
         if(string_count("/&gt;",tag)&gt;0)
         {
          tag = string_copy(tag,1,string_pos(" ",tag)-1);
          tag = string_replace(tag,"&lt;","");
          selfc = "self closing";
         }else
         if(string_count("&lt;/",tag)&gt;0)
         {
          tag = string_copy(tag,1,string_pos(" ",tag)-1);
          tag = string_replace(tag,"&lt;/","");
          selfc = "closing tag";
         }else
         {
          if(string_count("&lt;!",tag)&gt;0)|(string_count("&lt;?",tag)&gt;0)
          {
           selfc = "self closing";
          }else
          {
           selfc = "requires closing tag";
          }
          tag = string_copy(tag,1,string_pos(" ",tag)-1);
          tag = string_replace(tag,"&lt;","");
         }
        }
        if(tag!=""){
            if(!ini_key_exists(selfc,tag))
            {
             ini_write_string(selfc,tag,"");
            }
        }
        
        ini_close();
        //write to ini - close
    arraysize = array_height_2d(tags);
    show_debug_message(string(arraysize)+"/"+string(tagsize));
    if (arraysize==tagsize){
        iterator=0;
    }
break;
case"processed":
    state="ready";
break;
default:break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>name=get_open_filename(".svg","untitled.svg");

if(name!=""){
    tags=0;
    readsize=0;
    object_filename.name = name;
    afile=file_bin_open(name,0);
    filesize=file_bin_size(afile);
    object_filename.filesize=filesize;
    file_bin_close(afile);
    myfile = file_text_open_read(name);
    payload="";
    count=0;
    state="opening file";
}


//key="8K5GheMN3sbwYxxCJazwwIUdd798Q5pWwTfnSsRsP-xP--aGC_fjuoU4JgXevs8vJy2gvLoXWAA9zmVHGF8eZw";
//post = http_get("https://api.cloudconvert.com/process/?inputformat=svg&amp;outputformat=png&amp;apikey="+key);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="62">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*var r_str = "null";
 if (ds_map_find_value(async_load, "id") == post)
    {
    if (ds_map_find_value(async_load, "status") == 0)
       {
            r_str = ds_map_find_value(async_load, "result");
       }
    }

show_message(r_str);
clipboard_set_text(r_str);*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();
currentfps=fps;


int2=room_width-10;
int3=room_width-50;
if(string_digits(string(readsize/filesize))==""){
int=0;
}else{
int=readsize/filesize;
}
if(string_digits(string(arraysize/tagsize))==""){
int4=0;
}else{
int4=arraysize/tagsize;
}
bytesCurrent           = readsize; 
bytesPerSec            = ((bytesCurrent-bytesPrevious)*currentfps)/1024;
bytesPrevious          = bytesCurrent;
tagsCurrent            = arraysize;
tagsPerSec             = (tagsCurrent-tagsPrevious)*currentfps;
tagsPrevious           = tagsCurrent;

draw_text(10,room_height-20,"tags/s:"+string(tagsPerSec));
draw_text(10,room_height-38,"kb/s:"+string(bytesPerSec/1024));


draw_set_halign(fa_right);
draw_text(int2,10,state);
draw_text(int2,24,string(arraysize)+"/"+string(tagsize));

draw_set_colour(c_black);
draw_rectangle(int3,y+30,int3+(40),y+35,0);
draw_set_colour(c_red);
draw_rectangle(int3,y+30,int3+(40*int),y+35,0);
draw_set_colour(c_black);

draw_set_colour(c_black);
draw_rectangle(int3,y+40,int3+(40),y+45,0);
draw_set_colour(c_red);
draw_rectangle(int3,y+40,int3+(40*int4),y+45,0);
draw_set_colour(c_black);




draw_set_halign(fa_left);
draw_text(0,0,OMNI_TIME);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
